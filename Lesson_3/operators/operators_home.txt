1. Implement other arithmetic operations on complex values:

Use operations_6.cpp and provide other operations:

binary operations: +, -, *, /, ==, !=
unary operations: -, +, prefix and postfix ++, --
assignment operations: -=, *=, /=

Think carefully, what type return value should have?
What operations should be 'const' and what should not?

Avoid code duplication.

// ----------------------------------------------------------------------------
2. Write unit-test and check correctness of these operations
using std::complex from <complex> header file.
{@see http://en.cppreference.com/w/cpp/numeric/complex }

// ----------------------------------------------------------------------------
3*. Write class Matrix.

Class Matrix represents a square matrix NxN. Store N dynamically in class,
type of elements should be 'double' (but think how to make a design which
allows to change type of elements easily in future).

Provide default ctor, ~dtor, copy ctor (deep copy), and several ctors with parameters:
a) (size_t N, double default_value) - initializes NxN matrix with default_value;
b) (size_t N, double** array) - initializes NxN matrix with values from array[][];

Overload all possible binary operations: +, -, * ;
Provide some overloadings when right-hand-side parameter is a 'double' scalar value;
Also, overload all assigments: +=, -=, *= ;
Overload unary operations: +, - ;
Overload boolean operations: ==, != ;
Overload streaming operations: <<, >> ;
Overload operator [], which allows to take (i, j)-th element like this: matrix[i][j];
Overload operator (), which does the same like this: matrix(i, j);

Provide some member-functions: determinant(), transpose(), inversion(), submatrix(), trace(), diag();
What of these operations should and what should not change the initial matrix?
What arguments should be passed to these functions, what are the types of return values?

Provide member-function minor(size_t row, size_t col) - initializes an adjacent minor (matrix N-1 x N-1) 
from matrix with row-th row and col-th column discarded; Use this member-function, when implementing
determinant() and inverse(). Provide similar ctor(const Matrix& obj, size_t row, size_t col) to initialize an adjacent minor.

Provide global function power() which raises a given matrix into an integer power. If power < 0, make an inversion.

Provide test samples. Do not check bounds of rows and cols in this implementation.

// ----------------------------------------------------------------------------
4** Write class Polynomial.

Class Polynomial represents a polynomial of N-th power (N >= -9999999) with 'double' coefficients.

Overload constructors: default ctor, ~dtor, copy ctor (deep copy), ctor from array of coefficients;
Overload all possible arithmetic operators and compare operators: +, -, *, /, %, +=, -=, *=, /=, %=, ==, !=, unary + and -;
Also, overload arithmetic operations when right-hand-side parameter is a 'double' scalar value;

Overload operator () which takes a double value x and calculates value of polynomial at point x; Use Horner's rule.
Overload operator , "comma", which calculated GCD of two polynomials (what is the type of result?);

Provide derivative() member-function which calculates 1st derivative of given polynomial. What should this function return?
Provide getPower() member-function which returns an integer power of given polynomial.

Overload operator << and >>; Output should look like: -1.5x^3 + 3x^2 - 5.7x + 11.0 - 0.5x^-1 ; Note: if coeffs is less than 0, you should skip leading '+' sign and replace it with '-', i.e. not like that: 3x^2 + -5.7x, instead: 3x^2 - 5.7x ;
You should not input a polynomial consisting of two or more monomials with the same power, i.e.: 5x^3 + 3x^3 + x^2 - 1.12
You can use x^1 or x^0 during input to determine termination of polynomial, 
but you should discard x^1 (replace by x) and x^0 (replace by just coeff), 
as well as coeffs equal to '1': 1x^2 should be x^2, x^1 should be x, 3x^0 should be 3.

Provide test samples.

Think carefully the way you choose to implement Polynomial.

